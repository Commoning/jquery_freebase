<?php

/**
 * @file
 * Provides drupal integration to freebase_suggest javascript library.
 *
 * There are 2 (two) ways to use the freebase library:
 * - textfield widget (field module from drupal)
 * - using Form API, see jquery_freebase_attach_autocomplete_suggest()
 */

define('JQUERY_FREEBASE_SUGGEST_LIBRARY_PATH', 'sites/all/libraries/freebase_suggest');

/**
 * Implements hook_help().
 */
function jquery_freebase_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Adds autocomplete suggestions to CCK textfields based on topic sets from the Freebase database.');
    case 'admin/help#jquery_freebase':
      $readme = file_get_contents(drupal_get_path('module', 'jquery_freebase') . '/README.txt');
      //$readme = filter_filter('process', 1, 0, $readme); // newlines
      //$readme = filter_filter('process', 2, 0, $readme); // urls
      // Create instructions to run.
      $fix_script = "";
      $realpath = realpath('.') . '/' . JQUERY_FREEBASE_SUGGEST_LIBRARY_PATH;
      if (! is_readable(dirname($realpath))) {
        $fix_script .= "mkdir '" . dirname($realpath) . "' ;\n";
      }
      if (! is_readable($realpath)) {
        $fix_script .= "mkdir '$realpath' ; \n";
      }
      $fix_script .= "wget -P '$realpath' http://freebaselibs.com/static/suggest/1.3/suggest.min.js ;\n";
      $fix_script .= "wget -P '$realpath' http://freebaselibs.com/static/suggest/1.3/suggest.min.css ;\n";
      $readme .= "<h3>Suggested commands to run to install: </h3><pre>$fix_script</pre>";
      return $readme;
  }
}

/**
 * Implements hook_libraries_info().
 */
function jquery_freebase_libraries_info() {
  $libraries['freebase_suggest'] = array(
    'title' => 'Freebase Suggest jQuery Library',
    'vendor url' => 'http://www.freebase.com',
    'download url' => 'http://www.freebase.com/docs/suggest',
    'version arguments' => array(
      'file' => 'suggest.min.js',
      'lines' => 2000,
      'pattern' => "/jQuery\.suggest\.version='Version:(.*?)';/",
    ),
    'files' => array(
      'css' => array(
        'suggest.min.css' => array(
          'type' => 'file',
          'media' => 'screen',
        ),
      ),
      'js' => array(
        'suggest.min.js' => array(),
      ),
    ),
  );

  return $libraries;
}

/**
 * Loads freebase-suggest 3rd party library files.
 */
function jquery_freebase_load_library() {
  $library = libraries_load('freebase_suggest');
}

/**
 * Implements hook_field_widget_info().
 *
 * Declare that we provide an alternative widget for text fields.
 */
function jquery_freebase_field_widget_info() {
  return array(
    'jquery_freebase_autocomplete' => array(
      'label' => t('Autocomplete text widget (from freebase)'),
      'field types' => array('text'),
      'settings' => array(
        'autocomplete_arguments' => '',
      ),
     'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 *
 * Additions to the "Manage Field" screen under content types. Configures
 * specific settings for this field instance.
 *
 * Edit and save the 'autocomplete_arguments' parameter.
 */
function jquery_freebase_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['autocomplete_arguments'] = array(
    '#type' => 'textfield',
    '#title' => t('Autocomplete arguments'),
    '#default_value' => $settings['autocomplete_arguments'],
    '#description' => t('
       Enter some instructions for filtering the freebase results,
       as per the <a href="http://www.freebase.com/docs/suggest">documentation</a>.
       This will restrict the results from freebase that the autocomplete
       search will return.
       Must be in Freebase topic type notation (JSON),
       eg <code>{"type":"/location/country"}</code>
       or <code>{"type":"/people/person"}</code>
       , <code>{"type":["/film/production_company", "/book/publishing_company"]}</code>.
    '),
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
 * Defines how the data-entry field on node edit-forms works.
 *
 * It's MOSTLY like a textfield, just with a bit of extra javascript when it
 * gets rendered.
 */
function jquery_freebase_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $element_info = element_info('textfield');
  $element += array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
    '#process' => array_merge($element_info['#process'], array('jquery_freebase_attach_autocomplete_suggest')),
    '#freebase_suggest_arguments' => $settings['autocomplete_arguments'],
  );

  return $element;
}

/**
 * A form #process callback.
 * Adding a #process attribute to your form elements will make this happen.
 *
 * Invoke this when making a FAPI form element by adding:
 * $form['fieldname'] = array(
 *   '#type' => 'textfield',
 *   '#process' => array('jquery_freebase_attach_autocomplete_suggest'),
 *   '#freebase_suggest_arguments' => "{'type': '/freebase/type_profile'}"
 * )
 *
 * Or in a hook_form_alter():
 * $form['fieldname']['#process'][] = 'jquery_freebase_attach_autocomplete_suggest';
 * $form['fieldname']['#freebase_suggest_arguments'] = "{'type': '/freebase/type_profile'}";
 */
function jquery_freebase_attach_autocomplete_suggest($element, $form_state) {
  $element_id = $element['#id'];
  $search_arguments = $element['#freebase_suggest_arguments'];
  $settings['jquery_freebase']['elements'][] = array(
    'id' => "#{$element_id}",
    'arguments' => $search_arguments,
  );

  // Display UI hint that this element has autocomplete.
  $element['#attributes']['class'][] = 'form-autocomplete';

  jquery_freebase_load_library();
  drupal_add_js(drupal_get_path('module', 'jquery_freebase') . '/jquery_freebase.js');
  drupal_add_js($settings, 'setting');

  return $element;
}
